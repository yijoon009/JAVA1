출력메소드
	print();
		줄바꿈을 하지 않고 출력
	println();
		마지막에 줄바꿈을 해주고 출력
	printf();
		서식문자를 사용할 수 있다.

컴파일러의 해석 방향
	위에서 아래로, 좌에서 우로

변수(저장공간)
	x	=	0
        저장공간의	대입	값(상수)
	이름	연산자

자료형(type)

	자료형	type	byte	값	

	정수형	int	4	1, 0, -156, 156156,....
	실수형	float	4	0.0F, 1.0F, -456.21321F,...
		double	8	0.0, 1.0, -456.21321,...
	문자형	char	2	'a', '0', '김', ...
	문자열	String	??	"a", "0", "ABC", "1+9",...

변수의 선언
	초기화
	자료형 변수명 = 초기값;

변수 선언시 RAM
	int x = 10;

	x라는 이름의 저장공간이 RAM에 할당되고, 10이라는 값이
	x에 저장된다.

주소(C언어 : 포인터, JAVA : 해쉬코드)
	저장공간이 RAM에 할당되면, 중복되지 않는 주소값이 부여된다.

변수의 사용
	변수명을 그대로 사용한다.
	변수 사용시 저장공간인지 값인지를 잘 구분하여야 한다.
	앞에 자료형이 있거나 뒤에 대입 연산자가 있다면 저장공간이고,
	단독으로 사용되면 값으로 봐야한다!

	data = 10;	// 저장공간
	data + 7;		// 값
	data = data + 9;	// 저장공간, 값

변수 선언시 주의 사항
	같은 이름의 변수로 선언할 수 없다.
	초기화를 해준다.
	되도록 선언부에 한꺼번에 선언한다(클래스 또는 메소드의 상단)
		
변수명 주의 사항
	1. 숫자를 맨 앞에 쓰지 않는다(문자부터 시작한다)
	2. 특수문자(_ 제외)를 쓸 수 없다.
	3. 되도록 소문자를 사용한다.
	4. 공백을 사용할 수 없다.

	good_boy
	goodBoy : 카멜 표기법

	5. 되도록 한글은 사용하지 않는다.
	6. 뜻이 있는 단어를 선택한다.
		data, number, age, name, ....
	

서식 문자(format)
	반드시 따옴표 안에서 작성한다.

	%d : 정수(10진수 decimal)
	%o : 정수(8진수 octal)
	%x : 정수(16진수 hexadecimal)
	%f : 실수(float)
	%c : 문자(character)
	%s : 문자열(String)

변수를 사용하는 이유
	1. 반복되는 값을 쉽게 관리할 수 있다.
	2. 값에 의미 부여를 하기 위해서

형변환
	자동 형변환
		정수 + 정수 = 정수
		정수 + 실수 = 실수
		3 + 0.0 = 3.0

		문자 + 정수 = 정수
		'A' + 5 = 70

	강제 형변환
		(자료형)값
		(int)3.99 == 3

문자열 형변환
	
	- 문자열을 정수로
		Integer.parseInt("문자열값");

	- 문자열을 실수로
		Double.parseDouble("문자열값");

	- 다른 값을 문자열로
		다른 값 + ""
------------------------------------------------------------------------
입력 클래스(Scanner)
	입력 상태 : 커서가 깜빡이고 있는 상태
	사용자에게 입력할 값에 대해 먼저 출력해주고 입력을 사용한다.

	Scanner sc = new Scanner(System.in);

입력 메소드

	문자열 입력 메소드
	sc.next()
	sc.nextLine()


































