CGV다운받고 다시 작성해봐


배열 : 저장공간의 나열

	1. 변수를 여러 개 선언하면 이름도 여러 개 생기기 때문에
	관리하기 어렵다. 따라서 여러 칸 배열을 한 번 선언하면 
	이름은 한 개이고 각각의 칸을 방번호로 접근할 수 있게 되어서
	관리가 편해진다.

	2. 규칙성이 없는 값에 규칙성을 부여한다.

배열의 선언
	1. 자료형[] 배열명 = {값1, 값2, ...};
	2. 자료형[] 배열명 = new 자료형[칸수];

※자바에서의 배열은 동적배열밖에 없다.

new
	Heap 메모리에 할당하라는 명령어

인덱스가 0부터 시작하는 이유

	배열은 이름이 하나기 때문에 저장공간은 한 개 생긴다.
	하지만 들어갈 값은 여러 개가 있기 때문에 들어갈 값만큼의
	저장공간이 Heap 메모리에 할당된다.
	배열은 저장공간이 하나이기 때문에 값은 한 개 담을 수 있고,
	Heap 메모리에 할당된 여러 칸의 저장공간 중 첫번재 저장공간의
	주소값이 바로 배열에 담긴다.
	100 + 1은 101이지만, 100번지 + 1은 해당 주소의 자료형만큼
	증가하기 때문에 int라고 가정하면 100번지 + 1은 104가 된다.
	따라서 시작 주소를 가지고 있는 배열에 연산을 하게 되면
	다음 칸의 주소에 접근할 수 있게 된다.
	시작 주소에 아무리 연산을 해도 주소값이고, 사용자는 그 주소에 있는
	값이 필요하다. 따라서 C언어에서는 *이라는 연산자로 주소에 있는 
	값에 접근할 수 있고, (배열명 + n)이 바로 n번째 칸에 있는 값이다.
	따라서 첫번재 방에 접근하기 위해서는 배열명 + 0을 해야하고,
	방번호는 0부터 시작하게 된다. 위의 연산이 복잡하기 때문에
	[]로 치환하여 배열명[n]으로 사용하고, 방번호는 인덱스라고 부른다.
	그래서 인덱스는 0부터 시작한다.
	=배열은 시작주소를 갖고있기 때문입니다!

배열의 사용
	int[] arData = {3,2,1,5};
	
	arData[0]=10;		//저장공간
	arData[2]+9;		//값
	arData[1]=arData[3]+8;	//저장공간, 값
	arData[10]+8;		//오류

length

	배열의 길이를 담고 있는 상수
	배열 선언시 자동으로 선언된다.
	배열명.length : 배열의 길이



		//[초급]
		//100~1까지 배열에 담고 출력하기
		//1~100까지 중 짝수만 배열에 담고 출력하기
		//1~10까지 배열에 담고 총 합 구하기
		//1~n까지 배열에 담고 총 합 구하기
		//A~F까지 배열에 담고 출력하기
		//A~F까지 중 C제외하고 배열에 담은 후 출력하기
		
		//[중급]
		//aBcD...Z 배열에 담고 출력하기
		//5개의 정수를 입력받고 최대값과 최소값 출력하기
		//문자열을 입력받고 소문자만 대문자로 바꾸기
		//사용자가 입력한 값만큼 정수를 입력받고 배열에 넣은 후 3의 배수만 출력하기
		
		//[고급]
		//90%확률로 꽝을 출력하고 10%확률로 당첨을 출력하기
		//정수를 한글로 변경하기 1024->일공이사
		//한글을 정수로 변경하기 일공이사 ->1024


















