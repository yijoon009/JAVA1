 출력메소드

	print();		줄바꿈을 하지 않고 출력
	println();		마지막에 줄바꿈을 해주고 출력
	printf();		서식문자를 사용할 수 있다. format


	컴파일러의 해석 방향
		-위에서 아래로, 좌에서 우로

제어문자
	따옴표안에 \가 있으면 제어문자

주석
	해석하지 않도록 하는 기법
	1. 코드에 설명글에 달 때
	2. 지금 당장 사용하지 않는 코드가 있을 때


-----


-변수(저장공간)(Variable)

		x	=	0
	  저장공간의 이름    대입연산자     값(상수)

-자료형(type)

	자료형	type	byte	값

	논리형	boolean	1	true, false, 10<1
	참과 거짓은 하나의 정보입니다. 따라서 하나의 정보를 표현하기 위해선 최소단위가 1 바이트기 때문에 불린은 1바이트로 표현합니다.

	정수형	int	4	1,0,-1,,,
		(32bit운영체제에서는 4byte의 크기면
		모든 종류의 정수를 담을 수 있기 때문에
		정수형 중 int가 기본형으로 채택되었다.)

		byte	1
		short	2
		=======>이미지 또는 동영상 파일에서 사용된다.
		int	4(-21억~21억)
		long	8(밀리초:1000분의 1초, 시간, 캘린더)	10L
	실수형	float	4	0.0F, 1.0F, -456.22F,,,
		double	8	0.0, 1.0,,,
	문자형	char	2 	'a','0','김',,,
		(C언어는 아스키코드 사용하기 때문에 1byte
		JAVA는 유니코드 사용하기 때문에 2byte)(\u)	
	문자열	String	??	"a","0","ABC","1+9",,,

	(1바이트 8비트)

-변수의 선언
	
	초기화(쓰레기값 없애기 위해서)
	자료형 변수명 = 초기값;

-변수 선언시 RAM

	int x=10;
	x라는 이름의 저장공간이 RAM에 할당되고, 10이라는 값이
	x에 저장된다.

-주소(C언어:포인터, JAVA:해쉬코드)

	저장공간이 RAM에 할당되면, 중복되지 않는 주소값이 부여된다.

-변수의 사용

	변수명을 그대로 사용한다.
	변수 사용시 저장공간인지 값인지를 잘 구분하여야 한다.
	앞에 자료형이 있거나 뒤에 대입 연산자가 있다면 저장공간이고,
	단독으로 사용되면 값으로 봐야한다!

	data=10;	//저장공간
	data+7;		//값 //==10+7;
	data=data+9;	//저장공간, 값


-변수 선언시 주의사항

	같은 이름의 변수로 선언할 수 없다.
	초기화를 해준다.
	되도록 선언부에 한꺼번에 선언한다. (클래스 또는 메소드의 상단)
	
-변수명 주의 사항

	1. 숫자를 맨 앞에 쓰지 않는다.(문자부터 시작한다)
	2. 특수문자(_ 제외) 를 쓸수없다.
	3. 되도록 소문자를 사용한다.
	4. 공백을 사용할 수 없다.

	good_boy
	goodBoy : 카멜 표기법
	
	5. 되도록 한글은 사용하지 않는다.
	6. 뜻이 있는 단어를 선택한다.
		data, number, age, name,,,
	
-서식 문자(format)

	반드시 따옴표 안에서 작성한다.
	
	%d	:정수 10진수 decimal
	%o	:정수 8진수 octal
	%x	:정수 16진수 hexadecimal
	%f	:실수 float
	%c	:문자 charcter
	%s	:문자열 String

-변수를 사용하는 이유

	1. 반복되는 값을 쉽게 관리할 수 있다. 
	2. 값에 의미부여를 하기 위해서
	

-----


형변환

	자동 형변환
		정수 + 정수 = 정수
		정수 + 실수 = 실수
		3 + 0.0 = 3.0

		문자 + 정수 = 정수(암호화)
		'A' + 5 = 70

	강제 형변환
		(자료형)값
		(int)3.99 == 3

문자열 형변환

	-문자열을 정수로 
		Interger.parseInt("문자열값");
	-문자열을 실수로
		Double.parseDouble("문자열값");
	-다른 값을 문자열로
		다른 값 + ""
		"" + 1 + 3

	Inter,Double 등의 클래스타입으로 String타입의 값을 강제 형변환할 수 있다.

+++++


입력 클래스(Scanner)

	입력 상태: 커서가 깜빡이고 있는 상태
	사용자에게 입력할 값에 대해 먼저 출력해주고 입력을 사용한다.

	Scanner sc = new Scanner(System.in);

입력 메소드(통째로 입력받은 값)
	
	문자열 입력 메소드
	sc.next()	: 공백, 줄바꿈문자(엔터)를 구분점으로 삼고 양 옆의 문자열 값을 분리시켜준다.
	sc.nextLine()	: 구분점없이 입력받은 모든 값을 저장한다.
	sc.nextInt()
	sc.nextDouble()





