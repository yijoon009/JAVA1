2차배열 문제 풀어보고 koreastudyroom 에서 답 확인해봐

-------------------------------------------

메소드
	1. 이름 뒤에 소괄호, 키워드 뒤에 소괄호 메소드 X
	2. 저장공간

✔상수랑 코드가 저장되는 공간이 RAM - text라는 공간.

리턴:	메소드 내에서 모든 작업이 완료되지 않을 때
	사용한 부분에 작업의 결과를 알려주어야 할 때

목적:
	1. 재사용, 특정성 부여하지 않는다.
	2. 소스코드 간결화

-------------------------------------------

구체화 시켜놓은게 객체화
ex. String name	<<name이 객체
Car mom	<<mom이 객체
Scanner sc	<<sc이 객체

객체가 갖고있는게 클래스의 주소
그래서 sc. 을 하는거야. 주소값뒤에 .을 찍어야 필드에 접근할수있으니까

--------------------------------------------

클래스: 반
	1. 주어이다.
		Monkey.eat("바나나");
		원숭이가  먹다  바나나를
		  주어   동사   목적어

		문장 맨 앞에 나오는 단어는 앞글자를 대문자로 작성한다.
		클래스가 항상 앞으로 나오므로 대문자로 시작한다.
		즉, 클래스는 주어이다.

	2. 타입이다.
		

클래스 선언
	class 클래스명{
		필드(변수, 메소드)	<<변수도 객체//메소드 안에있는건 변수, 클래스 안에있는건 객체
	}

클래스 사용
	클래스를 선언하고 필드를 선언하는 이유는
	클래스 안에 선언된 필드를 재사용하기 위함이다.
	추상적인 개념인 클래스로 필드에 접근하기 보다는
	구체적인 개념으로 접근하는 것이 일반적인 방법이다.
	따라서 추상적인 개념인 클래스를 구체화할 수 있는 무언가가
	필요하고, 그것이 바로 객체이다.

객체화: 클래스 타입의 객체를 선언하여 추상적인 개념을 구체화시키는 작업

	클래스명 객체명 = new 클래스명();
	--------------------------
		객체화(instance)

	객체화는 영어로 instance(예시)라고 부르고,
	객체화를 통해 나온 객체를 instance variable(변수)이라고 부른다.
	

하위 연산자(.)
	A.b라고 작성하면 A안에 b라고 해석한다.
	하위 연산자는 반드시 앞에 주소값을 작성해야 하고
	객체 필드명 으로 필드에 접근하게 된다.

생성자: 클래스명()
	이름 뒤에 소괄호가 있기 때문에 메소드와 똑같은 기능을 한다.
	하지만 생성자는 리턴기능을 지원하지 않기 때문에
	메소드라고 부르지 않는다.
	ex. Car mom = new Car();		

생성자의 역할
	1. 해당 클래스의 필드를 메모리에 할당하고, 부여된 주소값을
	   가지고 온다.
	2. 초기화

기본 생성자
	클래스 선언 시 코드상에는 보이지 않지만 자동으로
	생성자가 선언된다. 이러한 생성자를 기본 생성자라고 한다.
	만약 사용자가 직접 생성자를 선언하게 되면
	선언한 생성자가 기본 생성자로 변경된다.

✔왜 항상 기본생성자랑 초기화 생성자랑 같이쓰는가?
	기본생성자 없이 다른 클래스에 상속하다보면 오류나기 때문.
	부모의 기본생성자를 호출하는데 없으니까 오류남.

----------------------------------------------------

this: 필드에 접근한 객체가 가지고 있는 주소값을 받을 변수

	소스코드 상에는 필드가 각각 하나씩 선언된다.
	메소드 안에서 인스턴스 변수를 사용하고 나서
	여러 객체가 그 메소드에 접근했을 때, 하나의 변수만으로
	알맞는 값을 가져오기란 쉽지 않다.
	따라서 메소드에 접근한 객체가 가지고 있는 주소값을
	알 수 있다면, 변수 하나만으로도 알맞는 필드에 접근하여
	인스턴스 변수를 가져올 수 있게 된다.
	바로 이 변수가 this이다.
	
	클래스 선언시 자동으로 선언된다.


[메소드에만 있는 성질!!]	★★★★★★★★★★면접대비

다형성(Polymorphism) ex.  Car("BMW","BLUE",15000)	<<이런거		
(이름은 하난데 형태가 다양해)
	1. 오버로딩(Overloading): 넘쳐서 불러오기
		매개변수의 개수나 타입이 다르면 같은 이름으로
		선언할 수 있다.
	2. 
	
Storage Class(저장기억부류)

	Stack	(Heap)			Data영역

	지역변수			전역변수		정적변수(static)
	매개변수

초기화	직접			자동		자동
생명주기	}를 만났을때 메모리 해제	전역:new를 만났을때 / 정적: 프로그램 종료시	
보안성	상			중			하

---------------------------------------------------------------------

raod2 새로 만들어봐/복붙해와









